var shader = {"frag":"varying vec2 c;\n\nuniform vec3 color;\nuniform vec2 botLeft;\nuniform vec2 size;\n\n\nint mend(){\n\t//vec2 c = (vUV * size) + botLeft;\n\tvec2 z = c;\n\tfloat X2;\n\tfloat Y2;\n\tfor(int i = 0; i < runs; i++){\n\t\t\n\t\tX2 = z.x * z.x;\n\t\tY2 = z.y * z.y;\n\t\tz.y = 2.0*z.x*z.y+c.y;\n\t\tz.x = X2-Y2+c.x;\n\t\t\n\t\tif((X2+Y2)>4.0){\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn 0;\n}\nint modulo(int a, int b){\n\tfor ( int i = 0; i < runs; ++i )\n\t{\n\t\ta=a-b;\n\t\tif(a<b){\n\t\t\treturn a;\n\t\t}\n\t}\n\treturn 0;\n}\n\nvoid main() {\n\tfloat n = float(mend())/(float(runs)/2.0);\n\tif(n>1.0){\n\t\tgl_FragColor = vec4((n-1.)+color.x,(n-1.)+color.y,(n-1.)+color.z,1.);\n\t}\n\telse{\n\t\tgl_FragColor = vec4(color.x*n,color.y*n,color.z*n,1.0);\n\t}\n}","vert":"//varying vec2 vUV;\n\nvarying vec2 c;\n \nuniform vec2 botLeft;\nuniform vec2 size;\nuniform float asp;\n \nvoid main() {\n    c = botLeft + (uv * size);\n\n//    vUV = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n \n}"}